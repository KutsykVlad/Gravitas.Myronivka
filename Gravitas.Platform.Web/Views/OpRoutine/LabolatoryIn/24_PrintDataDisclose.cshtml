@using Gravitas.Model.DomainValue
@model Gravitas.Platform.Web.ViewModel.LaboratoryInVms.PrintDataDiscloseVm
@Html.HiddenFor(m => m.OpDataId)

<div class="row justify-content-between mb-5">
    @if (Model.DocumentTypeId == ExternalData.DeliveryBill.Type.Incoming)
    {
        <div class="col-sm-4">
            @Html.DropDownListFor(
                m => m.ReasonsForRefundId,
                Model.ReasonsForRefund.Select(d => new SelectListItem {Value = d.Id, Text = d.Name}),
                "-- Виберіть причину повернення --",
                new {@class = "form-control mt-1", @onchange="allowReject()"})
        </div>
    }
    
    <div class="col-sm-4">
        @Html.ActionLink(@"Друк", "Generate", "Report", 
            new {id = Model.OpDataId, nodeId = Model.NodeId},
            new {@class = "btn btn-primary btn-lg btn-block", @target = "_blank"})
    </div>
    <div class="col-sm-4">

        @if (Model.IsLabFile)
        {
            <div class="row">
                <div class="col-12">
                    <button type="#" class="btn btn-primary btn-lg btn-block" disabled="disabled">Файл завантажено</button>
                </div>
            </div>
        }
        else
        {
            using (Ajax.BeginForm("PrintDataDisclose_SaveFile", "LaboratoryIn", FormMethod.Post, new AjaxOptions(), new {enctype = "multipart/form-data"}))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.NodeId, new {@id = "nodeId"})
                <div class="row">
                    <div class="col-9">
                        <input type="file" name="LaboratoryFile" id="LaboratoryFile" class="form-control" accept="image/x-png,image/gif,image/jpeg"/>
                    </div>
                    <div class="col-3">
                        <button type="submit" class="btn btn-primary btn-lg btn-block">
                            <i class="fa fa-upload" aria-hidden="true"></i>
                        </button>
                    </div>
                </div>
            }
        }

    </div> 
</div>

<div class="form-row">
    <div class="form-group col-lg-6">
        @Html.LabelFor(m => m.SamplePrintoutVm.ProductName, htmlAttributes: new { @class = "" })
        @Html.EditorFor(m => m.SamplePrintoutVm.ProductName, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
    </div>
    <div class="form-group col-lg-6">
        @Html.LabelFor(m => m.SamplePrintoutVm.SenderName, htmlAttributes: new { @class = "" })
        @Html.EditorFor(m => m.SamplePrintoutVm.SenderName, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
    </div>
    <div class="form-group col-12">
        @Html.LabelFor(m => m.SamplePrintoutVm.CommentAutoGenerated, htmlAttributes: new { @class = "" })
        @Html.EditorFor(m => m.SamplePrintoutVm.CommentAutoGenerated, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
    </div>

    <div class="form-group col-12">
        @Html.LabelFor(m => m.SamplePrintoutVm.ImpurityValue, htmlAttributes: new { @class = "" })
    </div>
    <div class="form-group col-lg-6">
        @Html.EditorFor(m => m.SamplePrintoutVm.ImpurityValue, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
    </div>
    <div class="form-group col-lg-6">
        @Html.EditorFor(m => m.SamplePrintoutVm.ImpurityValueUserName, new { htmlAttributes = new { @class = "form-control align-bottom", @readonly = "true" } })
    </div>

    <div class="form-group col-12">
        @Html.LabelFor(m => m.SamplePrintoutVm.HumidityValue, htmlAttributes: new { @class = "" })
    </div>
    <div class="form-group col-lg-6">
        @Html.EditorFor(m => m.SamplePrintoutVm.HumidityValue, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
    </div>
    <div class="form-group col-lg-6">
        @Html.EditorFor(m => m.SamplePrintoutVm.HumidityValueUserName, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
    </div>

    <div class="form-group col-12">
        @Html.LabelFor(m => m.SamplePrintoutVm.IsInfectionedClassId, htmlAttributes: new { @class = "" })
    </div>
    <div class="form-group col-lg-6">
        @Html.EditorFor(m => m.SamplePrintoutVm.IsInfectionedClassId, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
    </div>
    <div class="form-group col-lg-6">
        @Html.EditorFor(m => m.SamplePrintoutVm.IsInfectionedValueUserName, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
    </div>

    <div class="form-group col-12">
        @Html.LabelFor(m => m.SamplePrintoutVm.EffectiveValue, htmlAttributes: new { @class = "" })
    </div>
    <div class="form-group col-lg-6">
        @Html.EditorFor(m => m.SamplePrintoutVm.EffectiveValue, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
    </div>
    <div class="form-group col-lg-6">
        @Html.EditorFor(m => m.SamplePrintoutVm.EffectiveValueUserName, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
    </div>
</div>
<div class="row justify-content-between mb-5" id="labButtons">
    <div class="col-sm-4">
         @if (Model.DocumentTypeId == ExternalData.DeliveryBill.Type.Incoming)
         {
             @Ajax.ActionLink(@"Відмовити", "PrintDataDisclose_Cancel", "LaboratoryIn", new { nodeId = Model.NodeId }, null, new { @class = "btn btn-danger btn-lg btn-block disabled", @id = "rejectButton" })
         }
         else
         {
             @Ajax.ActionLink(@"Перезавантаження", "PrintDataDisclose_Reload", "LaboratoryIn", new { nodeId = Model.NodeId }, null, new { @class = "btn btn-danger btn-lg btn-block" })
         }
        </div>

    <div class="col-sm-4">
        @Ajax.ActionLink(@"На погодження", "PrintDataDisclose_Confirm", "LaboratoryIn", new { nodeId = Model.NodeId, isConfirmed = false }, null, new { @class = "btn btn-warning btn-lg btn-block" })
    </div>

    <div class="col-sm-4">
        @Ajax.ActionLink(@"На вивантаження", "PrintDataDisclose_Confirm", "LaboratoryIn", new { nodeId = Model.NodeId, isConfirmed = true }, null, new { @class = "btn btn-success btn-lg btn-block" })
    </div>
</div>

<script>
    document.getElementById('rejectButton').classList.add('disabled');
    function allowReject() {
        var el = document.getElementById("ReasonsForRefundId");

        document.getElementById('rejectButton').href = "@Url.Action("PrintCollisionManage_SetRouteToExit", "LaboratoryIn", new {nodeId = Model.NodeId})" +
            "&indexRefundReason=" +
            el.value;
          

        if (el.selectedIndex === 0) document.getElementById('rejectButton').classList.add('disabled');
        else {
            if (@Json.Encode(Model.IsLabFile)) document.getElementById('rejectButton').classList.remove('disabled');
        }
    }
</script>